allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'
}

idea {
    project {
        jdkName = JavaVersion.VERSION_1_6
        languageLevel = JavaVersion.VERSION_1_6

        vcs = "Git"
    }

    workspace.iws.withXml { provider ->
        def junitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find {
            it.@type == 'JUnit'
        }
        junitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = '$MODULE_DIR$'
    }
}

subprojects {
    apply plugin: 'java'
    group = 'com.github.dreamhead'
    version = '0.10.1-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    repositories {
        jcenter()
    }

    project.uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'Moco is an easy setup stub framework, mainly focusing on testing and integration.'
                    url 'https://github.com/dreamhead/moco'

                    scm {
                        url 'https://github.com/dreamhead/moco'
                        connection 'https://github.com/dreamhead/moco.git'
                        developerConnection 'git@github.com:dreamhead/moco.git'
                    }

                    licenses {
                        license {
                            name 'MIT Licence'
                            url 'https://raw.github.com/dreamhead/moco/master/MIT-LICENSE.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'dreamhead'
                            name 'Zheng Ye'
                        }
                    }
                }
            }
        }
    }

    project.ext {
        guavaVersion = '18.0'
        nettyVersion = '4.0.28.Final'
        slf4jVersion = '1.7.12'
        commonsIoVersion = '2.4'
        jacksonVersion = '2.5.3'
        junitVersion = '4.12'
        hamcrestVersion = '1.3'
        mockitoVersion = '1.10.19'
        httpComponentVersion = '4.4.1'
        jsonpathVersion = '2.0.0'
        freemarkerVersion = '2.3.22'
    }

    project.jar {
        manifest {
            attributes 'Package': "com.github.dreamhead",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${version}",
                    'Implementation-Vendor': 'Zheng Ye',
                    'Built-By': 'Zheng Ye',
                    'Built-Date': new Date().getDateTimeString(),
                    'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                    'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        }
    }

    project.dependencies {
        compile(
                "com.google.guava:guava:$guavaVersion",
                "io.netty:netty-codec-http:$nettyVersion",
                "commons-io:commons-io:$commonsIoVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "org.apache.httpcomponents:httpclient:$httpComponentVersion",
                "com.jayway.jsonpath:json-path:$jsonpathVersion",
                "org.freemarker:freemarker:$freemarkerVersion",
                "org.slf4j:slf4j-api:$slf4jVersion"
        )

        testCompile(
                "junit:junit:$junitVersion",
                "org.hamcrest:hamcrest-core:$hamcrestVersion",
                "org.hamcrest:hamcrest-library:$hamcrestVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.apache.httpcomponents:fluent-hc:$httpComponentVersion"
        )
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
