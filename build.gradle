import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenCentral()
    }

    ext {
        proguardVersion = '4.11'
    }

    dependencies {
        classpath "net.sf.proguard:proguard-gradle:$proguardVersion"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'
}

project(':') {
    idea {
        project {
            jdkName = JavaVersion.VERSION_1_6
            languageLevel = JavaVersion.VERSION_1_6

            ipr.withXml { xml ->
                def mapping = xml.node.component.find { it.@name == "VcsDirectoryMappings" }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }

        workspace.iws.withXml { provider ->
            def junitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find { it.@type == 'JUnit' }
            junitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = '$MODULE_DIR$'
        }
    }
}

subprojects {
    apply plugin: 'java'
    group = 'com.github.dreamhead'
    version = '0.9.2-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    repositories {
        mavenCentral()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'Moco is an easy setup stub framework, mainly focusing on testing and integration.'
                    url 'https://github.com/dreamhead/moco'

                    scm {
                        url 'https://github.com/dreamhead/moco'
                        connection 'https://github.com/dreamhead/moco.git'
                        developerConnection 'git@github.com:dreamhead/moco.git'
                    }

                    licenses {
                        license {
                            name 'MIT Licence'
                            url 'https://raw.github.com/dreamhead/moco/master/MIT-LICENSE.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'dreamhead'
                            name 'Zheng Ye'
                        }
                    }
                }
            }
        }
    }

    project.ext {
        guavaVersion = '16.0.1'
        nettyVersion = '4.0.18.Final'
        slf4jVersion = '1.7.7'
        commonsIoVersion = '2.4'
        jacksonVersion = '2.3.3'
        junitVersion = '4.11'
        hamcrestVersion = '1.3'
        mockitoVersion = '1.9.5'
        httpComponentVersion = '4.3.2'
        jsonpathVersion = '0.9.1'
        freemarkerVersion = '2.3.20'
    }

    jar {
        manifest {
            attributes 'Package': "com.github.dreamhead",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${version}",
                    'Implementation-Vendor': 'Zheng Ye',
                    'Built-By': 'Zheng Ye',
                    'Built-Date': new Date().getDateTimeString(),
                    'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                    'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        }
    }

    dependencies {
        compile(
                "com.google.guava:guava:$guavaVersion",
                "io.netty:netty-codec-http:$nettyVersion",
                "commons-io:commons-io:$commonsIoVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "org.apache.httpcomponents:httpclient:$httpComponentVersion",
                "com.jayway.jsonpath:json-path:$jsonpathVersion",
                "org.freemarker:freemarker:$freemarkerVersion",
                "org.slf4j:slf4j-api:$slf4jVersion",
        )

        testCompile(
                "junit:junit-dep:$junitVersion",
                "org.hamcrest:hamcrest-core:$hamcrestVersion",
                "org.hamcrest:hamcrest-library:$hamcrestVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.apache.httpcomponents:fluent-hc:$httpComponentVersion"
        )
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
    }
}

project(':moco-core') {

    dependencies {
        runtime(
                "org.slf4j:slf4j-simple:$slf4jVersion"
        )
    }
}

project(':moco-runner') {

    ext {
        logbackVersion = '1.1.2'
        commonsCliVersion = '1.2'
    }

    dependencies {
        compile(
                project(':moco-core'),
                "commons-cli:commons-cli:$commonsCliVersion"
        )

        runtime("ch.qos.logback:logback-classic:$logbackVersion") {
            exclude group: "org.slf4j", module: "slf4j-simple"
        }

        testCompile project(':moco-core').sourceSets.test.output

        testRuntime(
                project(':moco-core').sourceSets.test.resources,
                project(':moco-runner').sourceSets.main.resources
        )
    }

    task uberjar(type: Jar, dependsOn: jar) {
        classifier = 'uber'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        exclude('META-INF/maven/**')

        from files(project(':moco-core').sourceSets.main.output.classesDir)
        from files(project(':moco-core').sourceSets.main.output.resourcesDir)
        from files(sourceSets.main.output.classesDir)
        from files(sourceSets.main.output.resourcesDir)
        from configurations.runtime.asFileTree.files.collect { zipTree(it) }

        manifest {
            attributes 'Main-Class': 'com.github.dreamhead.moco.bootstrap.Main',
                    'Package': "com.github.dreamhead",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${version}",
                    'Implementation-Vendor': 'Zheng Ye',
                    'Built-By': 'Zheng Ye',
                    'Built-Date': new Date().getDateTimeString(),
                    'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                    'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        }
    }

    task proguard(type: proguard.gradle.ProGuardTask, dependsOn: uberjar) {
        injars uberjar.archivePath
        outjars uberjar.archivePath.toString().replace(uberjar.classifier, 'standalone')
        libraryjars javaRtLib()
        libraryjars jsseLib()
        configuration file("$rootDir/proguard.pro")
    }

    task proguardCheck(type: Test, dependsOn: proguard) {
        testLogging { exceptionFormat "full" }
        classpath = classpath - files(sourceSets.main.output.classesDir) - files(configurations.runtime) + files(proguard.outputs.files.singleFile)
    }

    uploadArchives.dependsOn proguardCheck

    artifacts {
        archives proguard.outputs.files.singleFile
    }
}

def javaRtLib() {
    javaLibPath("/lib/rt.jar", "/../Classes/classes.jar")
}

def jsseLib() {
    javaLibPath("/lib/jsse.jar", "/../Classes/jsse.jar")
}

def javaLibPath(lib, osLib) {
    def javaBase = System.properties["java.home"];
    def target = lib
    if (OperatingSystem.current().isMacOsX()) {
        if (!new File(javaBase + target).exists()) {
            target = osLib
        }
    }
    javaBase + target
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
