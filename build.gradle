allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'
}

project(':') {
    idea.workspace.iws.withXml { provider ->
        def junitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find { it.@type == 'JUnit' }
        junitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = '$MODULE_DIR$'
    }
}

subprojects {
    apply plugin: 'java'
    group = 'com.github.dreamhead'
    version = '0.6.3-SNAPSHOT'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
        mavenCentral()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'Moco is a easy setup stub framework, mainly focusing on testing and integration.'
                    url 'https://github.com/dreamhead/moco'

                    scm {
                        url 'scm:git@github.com:dreamhead/moco.git'
                        connection 'scm:git@github.com:dreamhead/moco.git'
                        developerConnection 'git@github.com:dreamhead/moco.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'dreamhead'
                            name 'Zheng Ye'
                        }
                    }
                }
            }
        }
    }

    project.ext {
        guavaVersion = '14.0.1'
        nettyVersion = '3.6.3.Final'
        slf4jVersion = '1.7.3'
        commonsIoVersion = '2.4'
        logbackVersion='1.0.10'
        junitVersion = '4.10'
        hamcrestVersion = '1.3'
        mockitoVersion = '1.9.5'
        httpComponentVersion = '4.2.1'
        jacksonVersion = '2.1.0'
    }

    dependencies {
        compile(
                "com.google.guava:guava:$guavaVersion",
                "io.netty:netty:$nettyVersion",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "commons-io:commons-io:$commonsIoVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        )

        runtime(
                "ch.qos.logback:logback-classic:$logbackVersion"
        )

        testCompile(
                "junit:junit-dep:$junitVersion",
                "org.hamcrest:hamcrest-core:$hamcrestVersion",
                "org.hamcrest:hamcrest-library:$hamcrestVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.apache.httpcomponents:fluent-hc:$httpComponentVersion"
        )
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives sourcesJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

project(':moco-runner') {
    dependencies {
        compile(
                project(':moco-core'),
                'commons-cli:commons-cli:1.2'
        )

        testCompile project(':moco-core').sourceSets.test.output
        testRuntime project(':moco-core').sourceSets.test.resources
    }

    task uberjar(type: Jar, dependsOn: jar) {
        classifier = 'standalone'

        from files(project(':moco-core').sourceSets.main.output.classesDir)
        from files(project(':moco-core').sourceSets.main.output.resourcesDir)
        from files(sourceSets.main.output.classesDir)
        from configurations.runtime.asFileTree.files.collect { zipTree(it) }

        manifest {
            attributes 'Main-Class': 'com.github.dreamhead.moco.bootstrap.Main'
        }
    }

    artifacts {
        archives uberjar
    }
}
