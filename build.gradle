allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'signing'
}

project(':') {
    idea {
        project {
            jdkName = '1.6'
            languageLevel = '1.6'

            ipr.withXml { xml ->
                def mapping = xml.node.component.find { it.@name == "VcsDirectoryMappings" }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }

        workspace.iws.withXml { provider ->
            def junitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find { it.@type == 'JUnit' }
            junitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = '$MODULE_DIR$'
        }
    }
}

subprojects {
    apply plugin: 'java'
    group = 'com.github.dreamhead'
    version = '0.8-SNAPSHOT'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'Moco is a easy setup stub framework, mainly focusing on testing and integration.'
                    url 'https://github.com/dreamhead/moco'

                    scm {
                        url 'scm:git@github.com:dreamhead/moco.git'
                        connection 'scm:git@github.com:dreamhead/moco.git'
                        developerConnection 'git@github.com:dreamhead/moco.git'
                    }

                    licenses {
                        license {
                            name 'MIT Licence'
                            url 'https://raw.github.com/dreamhead/moco/master/MIT-LICENSE.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'dreamhead'
                            name 'Zheng Ye'
                        }
                    }
                }
            }
        }
    }

    project.ext {
        guavaVersion = '14.0.1'
        nettyVersion = '3.6.6.Final'
        slf4jVersion = '1.7.5'
        commonsIoVersion = '2.4'
        jacksonVersion = '2.2.2'
        logbackVersion = '1.0.13'
        junitVersion = '4.10'
        hamcrestVersion = '1.3'
        mockitoVersion = '1.9.5'
        httpComponentVersion = '4.2.5'
        jsonpathVersion = '0.8.1'
        freemarkerVersion = '2.3.20'
    }

    jar {
        manifest {
            attributes 'Package': "com.github.dreamhead",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${version}",
                    'Implementation-Vendor': 'Zheng Ye',
                    'Built-By': 'Zheng Ye',
                    'Built-Date': new Date().getDateTimeString(),
                    'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                    'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        }
    }

    dependencies {
        compile(
                "com.google.guava:guava:$guavaVersion",
                "io.netty:netty:$nettyVersion",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "commons-io:commons-io:$commonsIoVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "org.apache.httpcomponents:httpclient:$httpComponentVersion",
				"com.jayway.jsonpath:json-path:$jsonpathVersion",
                "org.freemarker:freemarker:$freemarkerVersion"
        )

        runtime(
                "ch.qos.logback:logback-classic:$logbackVersion"
        )

        testCompile(
                "junit:junit-dep:$junitVersion",
                "org.hamcrest:hamcrest-core:$hamcrestVersion",
                "org.hamcrest:hamcrest-library:$hamcrestVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.apache.httpcomponents:fluent-hc:$httpComponentVersion"
        )
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

project(':moco-runner') {
    dependencies {
        compile(
                project(':moco-core'),
                'commons-cli:commons-cli:1.2'
        )

        testCompile project(':moco-core').sourceSets.test.output

        testRuntime(
                project(':moco-core').sourceSets.test.resources,
                project(':moco-runner').sourceSets.main.resources
        )
    }

    task uberjar(type: Jar, dependsOn: jar) {
        classifier = 'standalone'

        from files(project(':moco-core').sourceSets.main.output.classesDir)
        from files(project(':moco-core').sourceSets.main.output.resourcesDir)
        from files(sourceSets.main.output.classesDir)
        from files(sourceSets.main.output.resourcesDir)
        from configurations.runtime.asFileTree.files.collect { zipTree(it) }

        manifest {
            attributes 'Main-Class': 'com.github.dreamhead.moco.bootstrap.Main',
                    'Package': "com.github.dreamhead",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${version}",
                    'Implementation-Vendor': 'Zheng Ye',
                    'Built-By': 'Zheng Ye',
                    'Built-Date': new Date().getDateTimeString(),
                    'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                    'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        }
    }

    artifacts {
        archives uberjar
    }
}
